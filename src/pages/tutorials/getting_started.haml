%h2 Getting started on PoolParty

%p
  Congrats! You've decided to try out PoolParty, what next? Follow along as we go from zero to done! Time it, let's see how long it takes for you to have a full-blown application up on your cloud!
  
%p
  %i There are good docs that are updated more frequently on the
  %a=link 'wiki', 'http://wiki.github.com/auser/poolparty/installing'

%h4 Installation
%p
  Installing poolparty is simple:
  ~code_to_syntax("gem install auser-poolparty", "shell-unix-generic", "blackboard")
  Make sure you have executed
  ~code_to_syntax("gem sources --add http://gems.github.com", "shell-unix-generic", "blackboard")
  so that rubygems can find the gem.

%h4 Bleeding edge install
%p
  Grab the code from github:
  ~code_to_syntax("git clone git://github.com/auser/poolparty.git", "shell-unix-generic", "blackboard")
  Make the gem
  ~code_to_syntax("cd poolparty && rake local_deploy", "shell-unix-generic", "blackboard")

%h4 Pool spec
%p
  Everything in your pool is defined by your spec file, clouds.rb. This is where all the logic for your cloud will go.  You don't have to call it clouds.rb, thats just the default name poolparty looks for.  The PoolParty binary commands will look for this clouds.rb file in your current directory, and ~/.poolparty/ as well as your environment's POOL_SPEC variable.
%p
  We start out by making a pool.
  ~file_to_code("tutorials/first_pool.rb")
  This doesn't really do anything, but it gives us a convenient wrapper around our clouds. You don't need to define a pool, but it's usually a good idea if the clouds of nodes are going to talk to each other.  Properties set in the pool will be inherited by the contained clouds.
  Now let's make a cloud that actually does something.
  ~file_to_code("tutorials/basic_cloud.rb")
  Your cloud is now setup to scale from 2 instances to 5 instances at a maximum. You've defined one cloud (called hello) inside the pool (called party).  
%p
  From within this cloud block you describe your server setups. There are a quite few built-in
  = link "../docs/Resources"
  you can use here, for instance for a git repository
  ~code_to_syntax("has_git({:name => \"poolpartyrepos\", \n\t:source => \"git://github.com/auser/poolparty-website.git\", \n\t:at => \"/var/www/poolpartyrb.com\"})")
  or a file
  ~code_to_syntax('has_file(:name => "/var/www/index.html", :content => "<h2>Hello world</h2>")')

  The full list can be found
  = link "/lib/Resources"
  There are also 
  = link "/lib/Built in helpers"
  that you can use in your spec.
%p
  Things get a lot more interesting when plugins get involved. Currently, as of the time of this writing there are plugins in the works to setup apache2, passenger, ruby on rails, postgresql, mysql and more. The plugin syntax is clear and enjoyable as well, so if you require something different, please checkout the
  = link "/tutorials/Basic Plugin Tutorial"
%p
  You can also use 
  %a plugins
  = link "plugins"
  and chef recipes in you cloud blocks
  ~file_to_code('tutorials/chef_block.rb')
%p

%h4 Starting your cloud
%p
  PoolParty isn't tied to a specific remoter base (i.e. cloud provider.)  It can be extended to support anything that provides an api for starting, stopping and listing instances. The default remoter base for PoolParty is ec2. 
%p
  To get started on ec2, go ahead and check out the
  = link "/tutorials/Getting started on ec2"
  tutorial. Don't worry, this tutorial will be here when you get back.

%h4 Interacting with your cloud  
%p 
  If you have followed a tutorial from above, then you should be ready to interact with your cloud. Before we start it, we will need to make sure we have a key set for the clouds. Let's make note of what keypairs we have availble by running the command:
  ~code_to_syntax(" ec2-describe-keypairs ", "shell-unix-generic")
  This will list the keypairs you can use with your clouds.   By default PoolParty will use look for a keypair named id_rsa at ~/.ssh/ and ~/.ec2/ and /etc/poolparty.
%p
  Now we are ready to play with the cloud!

%h4= link "docs/Cloud Speak"
%p
  Once you have your pool spec at a comfortable spot, it's time to get your cloud launched. 
  ~code_to_syntax("cloud start", "shell-unix-generic", "blackboard")
%p
  %ul
    %li PoolParty will launch your instances
    %li Configure the instance based on the properties in your manifest
    %li Install the appropriate software
    %li Start monitoring the cloud
%p
  Now, let's list the cloud and see what instances we have up...
  ~code_to_syntax("cloud list --name hello", "shell-unix-generic", "blackboard")
  Hey! What do you know? It started a new instance for us based on the minimum instances requirement
  ~code_to_syntax("*** Listing cloud app\n****** Active instances\nmaster	75.101.162.232\nnode1	67.202.61.184", "shell-unix-generic", "blackboard")
%p
  Let's not forget to terminate the clouds so we aren't charged too much for playtime
  ~code_to_syntax("cloud terminate", "shell-unix-generic", "blackboard")
  Note, I left off the --name this time. If you do, it will pick the first cloud. I tend to leave it off when I only have one cloud in my pool.

%p
  PoolParty sets up a lightweight communication network and handles the provisioning and load balancing. The master instance is the main connection between your cloud and the rest of the world.
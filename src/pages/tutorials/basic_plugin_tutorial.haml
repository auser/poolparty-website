%h2 Basic plugin tutorial

%p
  Plugins provide the meat of PoolParty's functionality. We'll dive a little bit into the process of plugin development. They are intended on being very easy and fun to write, so with no further ado...
  
%h3 First steps
%p
  You have a bunch of resources (unlimited amount considering you can create your own, but that's out of the scope for this tutorial) at your disposal to use on your server. These are described more in-depth
  = link "here", "../lib/Resources"
  %small.note Thanks to benburkert, a plugin generator is in progress!

%p
  The structure of a gem is standard and should look like
  ~dir_to_syntax({:plugin_name => {:files => ["plugin_name.rb"], :dirs => {:spec => {:files => %w(spec_helper.rb plugin_name_spec.rb)}}}})
  The spec_helper will be generated for you or looks something like:
  
  ~file_to_code("tutorials/spec_helper.rb")
  
  Of course, you can write your own helpers in here to help out with your specs as well.

%p
  Now it's time to start writing some plugin functionality, of course after you have spec'd the functionality you want in your spec file.

%p
  We'll write a basic plugin to setup mysql on your servers. This is what our directory will look like:
  ~dir_to_syntax({:mysql_plugin => {:files => ["mysql.rb"], :dirs => {:spec => {:files => %w(spec_helper.rb mysql_spec.rb)}}}})
  
%p
  First, let's look at the finished
  %strong basic
  plugin, then we'll disect it

%p
  ~file_to_code("/tutorials/mysql_plugin.rb")

%h3 Packages

%p
  First, you'll notice that there are some lines with
  %strong has_package
  This tells your nodes and instances that they make sure they have these packages and if not, that they should be installed (installed with the preferred package manager). These are called "Resources." There is a list of the available 
  = link "/lib/Resources"
  here. Note that they can be preceeded by either has_ or does_not_have_, which does exactly what it sounds like. has_ sends a present notice to the resource and does_not_have_ sends an absent notice to the resource.

%h3 Setup
%p
  The has_exec function from within the base_install method is relatively obvious, however let's run through it, just in case. The function is used to set the mysqladmin password, as noted by the description.
%p
  %strong Subscribe
  Anytime that the packages Mysql-server, Mysql-shared and/or Mysql-client are changed, the exec will run. 
  %br
  %strong Refreshonly
  It will only run if there is a change to these packages.
  %br
  %strong ifnot
  First and foremost, it will run the ifnot command before running the exec. If the ifnot command returns anything other than an empty string or false, then the exec will be run.
  %br
  %strong command
  This defines the command that we are going to run.

%h3 Functions

%p
  Notice there is a password function defined on the plugin. This way, from within the plugin call, we can say password("mypassword"). This will set the variable: $password so we can use it from within the plugin. 

%h3 Usage
%p
  ~file_to_code("tutorials/mysql_usage.rb")

%p
  Stay tuned for more updates to this tutorial as we continue to advance the plugin and give it some virtual resources where we can ensure that there are specific databases setup and other setups for mysql.
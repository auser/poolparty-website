%h1
  Setting up EC2
.wikistyle
  %p
    %strong
      Note:
    PoolParty works with
    %span.caps
      ANY
    ubuntu
    %span.caps
      AMI
    (support for other OSes is already in progress)

  %h3
    Sign up
  .tutorial
    %ol
      %li
        Navigate to 
        = link "Amazon's aws page", "http://aws.amazon.com/"
        and click on the
        =link "Getting started", "http://www.amazon.com/gp/aws/registration/registration-form.html"
        link. If you already have an aws account, log in and skip the next step.
      .right
        =link(img("tutorials/ec2/signup.png"), "http://www.amazon.com/gp/aws/registration/registration-form.html")
      %li
        Sign up and validate your account
      %li
        Once you've signed up or signed in, hover over the product's menu and click on Elastic Computing Cloud.
        =link img("tutorials/ec2/service_ec2.png"), "http://aws.amazon.com/ec2/"
      %li
        Then, click on the Sign up for Amazon EC2 button to sign up for the ec2 service
        =img("tutorials/ec2/ec2_button.png")
      %li
        Now, once you have access to ec2, get your access identifiers by hovering over Your Account in the menu and clicking on Access Identifiers
        =img("tutorials/ec2/access_ids.png")
      %li
        Scroll down the page and find the box titled "Access Key ID and Secret Access Key," In the box, you should see a box titled "Your Access Key ID." Make note of this string.
        =img("tutorials/ec2/access_key_id.png")
      %li
        Scroll down a little further and find the box titled "Your Secret Access Key." This box is hidden for security reasons, so you'll have to click on the show link. Make note of this string as well.
        =img("tutorials/ec2/secret_access_key_id.png")    
    .clear
      I like to copy and paste the identifiers into a temporary location so I don't have to navigate to the AWS page constantly. 


  %h3
    Setup
  %p
    PoolParty expects a number of access identifiers to be in one of several places. 
    
    %h4 clouds.rb

    %p
      You can explicitely set them in your clouds.rb like so:
      %pre
        %code
          cloud :app do
          \  access_key "AAAAAAAAAABBBBBB"
          \  secret_access_key "NRLSKDM@$@$/4@$%%NNNSN"
          \  # ...
          end

      Of course, this works if you are going to keep your spec local and private, but that doesn't really work well for sharing, so instead, let's set them as environment variables.

    %h4 
      environment variables

    %p
      Poolparty commands will look for the following
      %span.caps
        AWS
      environment variables
    %ul
      %li
        %tt EC2_ACCESS_KEY
      %li
        %tt EC2_SECRET_KEY
    %p
      for your
      %span.caps
        AWS
      access key, secret key, private key &amp; cert, respectively.
    %p
      Stick this in your 
      %tt ~/.bashrc 
      or 
      %tt ~/.profile.
      (Alternatively, create a script in
      %tt ~/.ec2/keys_and_secrets.sh
      and then 
      %tt source $HOME/.ec2/keys_and_secrets.sh
      in your
      %tt ~/.profile)

    %pre
      %code
        \#!/bin/sh
        export EC2_ACCESS_KEY="AAAAAAAAAABBBBBB"
        export EC2_SECRET_KEY="NRLSKDM@$@$/4@$%%NNNSN"
        export EC2_PRIVATE_KEY="/path/to/pk-XXX.pem"
        export EC2_CERT="/path/to/cert-XXX.pem"
    %p
      Be sure to open a new terminal before you continue so that your changes are re-loaded (or reload your profile from the command-line with
      %code
        source ~/.profile
      ).

    %p

  %h3
    Keypair
  %p
    Keypairs are generated automatically for you if your keypair does not exist. The naming
    convention is in the format: 
    %br
  :syntaxhighlighter
      [poolname]-[cloudname]

  %h3
    Security groups
  %p
    Security groups are how the clouds distinguish each other. You can specify security groups in your clouds.rb in the format:
    :syntaxhighlighter
      security_group do
        authorize :from_port => 22, :to_port => 22
      end
      
    PoolParty will take care of ensuring this security group with the specified ports open as well as it will close the ports that are open that are not specified to keep the security groups
    %span.emphasis declarative.
    
    You can also provide a name for the security groups:
    :syntaxhighlighter
      security_group "my-custom-named-security-group" do
        authorize :from_port => 22, :to_port => 22
      end
  
  %p.emphasis
    Note, to use the anything command that requires ssh access, you must allow port 22 to be opened in your security_group declaration.
    
  %h2 clouds.rb file location

  %p
    Your clouds.rb must be accessible to the command-line. It will try to require the clouds.rb from the current working directory if the clouds.rb is in the current directory. If it is not, you can specify the location with the -c switch with any cloud command.
    :syntaxhighlighter
      cloud show -c examples/simple.rb
  %p
    The clouds.rb is also "requireable" from ruby, so you can operate with the cloud from irb or any other ruby program, i.e.: 
    :syntaxhighlighter
      irb -r poolparty/clouds.rb

  %h3 External links

  %p
    %ul
      %li
        =link "AWS Getting Started Guide", "http://docs.amazonwebservices.com/AWSEC2/latest/GettingStartedGuide/"
      %li
        =link "AWS Documentation", "http://developer.amazonwebservices.com/connect/kbcategory.jspa?categoryID=84"
